#!/bin/bash
#
# set_cpu_state
#
# chkconfig: 2345 01 99
# description:	Set CPU Frequency, Turbo, Hyper-Threading, and other states
#
### BEGIN INIT INFO
# Provides: set_cpu_state
# Required-Start: 
# Required-Stop:
# Default-Start:    2 3 4 5
# Default-Stop:
# Short-Description: start and stop set_cpu_state
# Description:	set_cpu_state will set CPU Frequency, Turbo,
#               Hyper-Threading, and other states based on a 
#               simple config file
### END INIT INFO

#
#   References:
#   - https://software.intel.com/sites/default/files/comment/1716807/how-to-change-frequency-on-linux-pub.txt
#   - https://wiki.archlinux.org/index.php/CPU_frequency_scaling
#   - https://www.kernel.org/doc/Documentation/cpu-freq/index.txt
#   - https://www.reddit.com/r/linux/comments/1hdogn/acpi_cpufreq_or_intel_pstates/
#   - https://www.kernel.org/doc/Documentation/cpu-freq/intel-pstate.txt
#   - http://www.phoronix.com/scan.php?page=article&item=intel_pstate_linux315&num=1
#       (A multiple benchmark comparison of performance and power consumption
#       between the intel_pstate and acpi-cpufreq scaling drivers.)
#

#
# 2012.11.06 Brian Elliott Finley <bfinley@lenovo.com>
#  - Created
# 2013.02.25 Brian Elliott Finley <bfinley@lenovo.com>
# - allow "status" execution without requiring config file
#

PATH=/usr/sbin:/sbin:/usr/bin:/bin

FUNCTIONS="/usr/lib/hpc-goodies/functions.sh"
. $FUNCTIONS

PROGNAME=$(basename $0)

if [ -d /etc/sysconfig/ ]; then
    CONFIG=/etc/sysconfig/set_cpu_state
        # RedHat and friends...
elif [ -d /etc/default/ ]; then
    CONFIG=/etc/default/set_cpu_state
        # Debian and friends...
fi

EXAMPLE_CONFIG="
#
#   Please edit this $PROGNAME config file to set these variables
#   according to your preferences.  
#   
#   The indicated Default value will be used for any variable you do not
#   set.  The defaults values represent the recommended best practice
#   settings for most High Performance Computing systems.
#

#GOVERNOR=(conservative|ondemand|userspace|powersave|performance)
#     DEFAULT: ondemand    (on systems using 'acpi_cpufreq')
#     DEFAULT: performance (on systems using 'intel_pstate')
#
#USE_TURBO=(yes|no)
#     DEFAULT: yes
#
#     BEST PRACTICE for SysAdmins: Leave Turbo Mode  _ON_ at the
#     hardware level (BIOS or UEFI) and enable or disable it on the fly
#     (without rebooting) via this tool.
#
#     BEST PRACTICE recommendation under most circumstances for High
#     Performance Computing is to take the default of 'USE_TURBO=yes'.
#
#USE_HYPERTHREADING=(yes|no)
#     DEFAULT: no
#
#     BEST PRACTICE for SysAdmins: Leave Hyper-Threading _ON_ at the
#     BIOS or UEFI level, which allows you to enable or disable it on
#     the fly (without rebooting) via this tool.
#
#     BEST PRACTICE for HPC systems:  under most circumstances for High
#     Performance Computing is to take the default of
#     'USE_HYPERTHREADING=no'.
#
#LIMIT_REAL_CORES_TO_COUNT=NN
#     DEFAULT: no limit -- use all available real cores
#
#     BEST PRACTICE for Everyone:  Use all your cores.
#
#     This option exists primarily to allow use of software licenced by
#     the core, to run on a machine with a higher core count.  For
#     example, if you have a shiny new 24 core machine, but your software is
#     only licensed for 20 cores, you can LIMIT_REAL_CORES_TO_COUNT=20.
#
#     DETAILS:
#
#       This feature will balance the number of specified real cores
#       across available sockets as best as is mathematically possible.
#       For example, if a machine is limited to 20 cores, across 2x 12
#       core sockets (24 real cores), it will enable 10 real cores on
#       each socket, and turn off the rest.  And if you specify 21
#       cores, one socket will get 11, and the other 10.
#
#       If USE_HYPERTHREADING is set to 'yes', then it will set each
#       hyperthreaded core to match it's real core sibling's state
#       (either on or off).  In the example above, with a limit of 20
#       real cores, your result would be 20 real cores and 20
#       hyperthreaded cores.
#     
#   DISCLAIMER:
#
#       There's actually no such thing as a 'hyperthreaded core' -- I
#       just made that up. ;-)  But I'm calling them and treating them
#       as such for the sake of simplicity in documentation and in the
#       code.  There's no performance implication (positive or negative)
#       to dealing with them in this way, but it does make the
#       explanation simpler.  For details see:
#       http://find_a_good_url_for_this...
#
#
#MAX_FREQ=2600000
#     DEFAULT and best practice: Auto-select highest possible frequency.
#
#     WARNING: If MAX_FREQ and USE_TURBO is set to any value, the
#     MAX_FREQ setting will override the USE_TURBO setting.
#
#MIN_FREQ=1200000
#     DEFAULT and best practice: Auto-select lowest possible frequency.
#
#     WARNING: Setting this to your processor's highest frequency while
#     turbo is in use (see the 'USE_TURBO' setting), will yield
#     unexpected results including undeterministic performance.
# 
#     DETAILS:  
#
#       In order for cores to jump up into turbo frequencies, other
#       cores must be able to temporarily drop down to lower frequencies
#       to stay within the power envelope of the CPU package.  With all
#       cores in a 100W processor package running at their highest
#       non-turbo frequency (and therefore consuming 100% of the
#       processor package's available power), if some cores need to
#       consume more power to jump into a turbo frequency, one or more
#       other cores need to free up power by dropping down to lower
#       frequencies.  
#
#       At no time can the total power consumed by a processor package's
#       cores consume more than 100% of it's available power.  Now it
#       all makes sense, right? ;-)
#
#C1E_STATE=(on|off)
#     DEFAULT and HPC Best Practice: off
#
#C_STATE_LIMIT=(off|0|1|2|3|4|5)
#     DEFAULT and HPC Best Practice: 2
#
#     Best practice recommendation for High Performance Computing is to
#     set this to 2.
#
#     This setting limits how deep each core can go to sleep when it's
#     not busy.  The deeper the sleep level a core goes into, the longer
#     it takes it to wake to the desired level for performance.  The
#     latency imposed by that level by level wake-up process can have a
#     significant negative impact on the performance of certain codes
#     and very notably low-latency network communication. 
#
"

read_config() {
    if [ ! -e $CONFIG ]; then
        echo ""
        echo "Please run the following command to create a default $PROGNAME"
        echo "configuration file that you can edit to suit your needs:"
        echo ""
        echo "  $0 defaults"
        echo ""
        echo "If you are seeing this message, it means you don't already have a"
        echo "configuration file, so you don't have to worry about overwriting it. ;-)"
        echo ""

        exit 0
    fi

    . $CONFIG

    ######################################################################## 
    #
    # BEGIN normalize options
    #

    ANTI_REGEX='off|no|disabled|disengaged'
    PRO_REGEX='yes|on|enabled|engaged'


    USE_TURBO_orig=$USE_TURBO
    echo $USE_TURBO | egrep -qw -i "($ANTI_REGEX)"
    if [ $? -eq 0 ]; then

        if [ ! -z "$MAX_FREQ" -a ! -z "$USE_TURBO" ]; then
            echo "USE_TURBO and MAX_FREQ are both set.  MAX_FREQ=$MAX_FREQ will override USE_TURBO=$USE_TURBO_orig."
                # If not clearly a no, or if not set, turn on
        fi

        USE_TURBO=0

    else

        if [ ! -z "$MAX_FREQ"  -a  ! -z "$USE_TURBO" ]; then

            echo "USE_TURBO and MAX_FREQ are both set.  MAX_FREQ=$MAX_FREQ will override USE_TURBO=$USE_TURBO_orig."
                # If not clearly a no, or if not set, turn on

        elif [ -z "$MAX_FREQ" -a -z "$USE_TURBO" ]; then

            echo "USE_TURBO not set.  Defaulting to 'Yes'"
                # If not clearly a no, or if not set, turn on
        fi

        USE_TURBO=1
    fi


    USE_HYPERTHREADING_orig=$USE_HYPERTHREADING
    echo $USE_HYPERTHREADING | egrep -qw -i "($PRO_REGEX)"
    if [ $? -eq 0 ]; then
        USE_HYPERTHREADING=1
    else
        USE_HYPERTHREADING=0
        echo "USE_HYPERTHREADING not set.  Defaulting to 'No'"
            # if not clearly a yes or if not set, turn off
    fi


    C1E_STATE_orig=$C1E_STATE
    echo $C1E_STATE | egrep -qw -i "($PRO_REGEX)"
    if [ $? -eq 0 ]; then
        C1E_STATE=1
    else
        C1E_STATE=0
        #echo "C1E_STATE not set.  Defaulting to 'Disabled'"
            # if not clearly a yes  or  if not set, turn off
    fi


    C_STATE_LIMIT_orig=$C_STATE_LIMIT
    echo $C_STATE_LIMIT | egrep -qw -i "($PRO_REGEX)"
    if [ $? -eq 0 ]; then

        C_STATE_LIMIT=2
        echo "C_STATE_LIMIT=$C_STATE_LIMIT_orig.  Defaulting to '2'"

    elif [ -z "$C_STATE_LIMIT" ]; then

        C_STATE_LIMIT=2
        echo "C_STATE_LIMIT not set.  Defaulting to '2'"
            #
            # If set to "Yes", etc., then default here to 2.  If set to either
            # a number, or some form of "no", then the setting function will
            # handle it.  If a number, it will be used explicitly.  If not a
            # number (such as "no"), then it will not apply any setting. -BEF-
            #
    fi

    #
    # END Normalize options
    #
    ######################################################################## 
}


create_default_config_file() {
    echo ""
    echo "Creating a default $PROGNAME configuration file that you can edit to suit your"
    echo "needs.  No changes are necessary for most HPC environments -- just accept the defaults."
    echo ""
    echo "Here is the location of your new config file:"
    echo ""
    echo "    $CONFIG"
    echo ""
    echo ""
    echo "After editing (if desired), run this command to see the current system state:"
    echo ""
    echo "  $0 status"
    echo ""
    echo ""
    echo "Then run this command to apply the config file settings to the running system:"
    echo ""
    echo "  $0 start"
    echo ""
    echo ""
    echo "Lastly, try checking the status again to see the freshly applied settings:"
    echo ""
    echo "  $0 status"
    echo ""
    echo ""

    echo "$EXAMPLE_CONFIG" > $CONFIG
    
    exit 0
}


start() {

    read_config

    get_SCALING_DRIVER
    if [ $my_SCALING_DRIVER != 'acpi-cpufreq' ]; then
        cat <<'EOF'

WARNING: At this time use of acpi-cpufreq is required for _applying_
settings with the 'start' option.

To switch to the acpi-cpufreq driver, you'll need to add the following
as a kernel append parameter in your boot loader configuration file.

If you are on a modern distribution, this setting likely lives in the
config file /etc/default/grub.  Find the entry for "GRUB_CMDLINE_LINUX"
and add intel_pstate=disable to the end of the line.

    For example, on stock Ubuntu 16.04, you would change this

        GRUB_CMDLINE_LINUX="noprompt"

    to this:

        GRUB_CMDLINE_LINUX="noprompt intel_pstate=disable"
                                    ^^^^^^^^^^^^^^^^^^^^^

After editing, you'll need to run a command to update the actual boot
time settings.  On recent Ubuntu releases, that command is 'update-grub'.  
On recent releases of CentOS and friends, look for 'grub2-mkconfig'.

    For Ubuntu and friends, it's simple, and there are no options
    needed:
    
        sudo update-grub
    

    For other distributions you man need to provide options.  CentOS and
    friends requires that you specify the resulting output file, which
    may be in different locations, depending on whether you're using EFI
    or not.  To find yours in this case, do this:
    
        # Find it
        GRUB_CFG=$(find /boot/ -name grub.cfg | head -n 1)
    
        # Look at it
        echo $GRUB_CFG  
    
        # Update it
        grub2-mkconfig -o $GRUB_CFG
    
        # Verify it
        grep intel_pstate $GRUB_CFG


After running this command, just reboot, and you should be good to go!

NOTE:  Even without changing to the acpi-cpufreq scaling driver, you may
still be able to use the 'status' option.

EOF

        exit 1

    fi


    read_CPU_MAP_CACHE


    # Set this first before setting any freq settings, so that the other
    # settings apply to the hyperthread cores also.
    set_HYPERTHREADING_STATE

    set_LIMIT_REAL_CORE_count

    set_GOVERNOR
    set_MIN_FREQ
    #
    # set_MAX_FREQ is called by set_TURBO_ON and set_TURBO_OFF
    #

    if [ $USE_TURBO -eq 1 ]; then
        set_TURBO_ON
    else
        set_TURBO_OFF
    fi

    if [ $C1E_STATE -eq 1 ]; then
        set_C1E_ENABLED
    else
        set_C1E_DISABLED
    fi

    set_C_STATE_LIMIT
}


status() {

    read_CPU_MAP_CACHE

    echo "Sockets:               $cached_SOCKETS_count"
    echo "Turbo Boost in HW:     $cached_TURBO_HW_STATE"

    get_TURBO_OS_STATE
    echo "Turbo Boost in OS:     $my_TURBO_OS_STATE"

    get_HYPERTHREADING_STATE
    echo "Hyper-Threading in HW: $cached_HYPERTHREADING_HW_STATE"
    echo "Hyper-Threading in OS: $my_HYPERTHREADING_OS_STATE" 

    echo "Total Real Cores:      $cached_CORE_TOTAL_REAL_CORES_count"
    echo "Total Hyper Cores:     $cached_CORE_TOTAL_HYPERTHREADING_CORES_count"

    get_ACTIVE_REAL_CORES
    echo "Active Real Cores:     $my_ACTIVE_REAL_CORES_count"
    echo "Active Hyper Cores:    $my_ACTIVE_HYPERTHREADING_CORES_count"

    get_SCALING_DRIVER
    echo -n "Scaling Driver:        $my_SCALING_DRIVER"
    if [ $my_SCALING_DRIVER != 'acpi-cpufreq' ]; then
        echo
        echo -n "                       INFO: acpi-cpufreq is the recommended scaling driver for best control."
    fi
    if [ $my_SCALING_DRIVER = 'intel_pstate' ]; then
        echo
        echo    "                       INFO: If you add 'intel_pstate=disable' as a kernel append parameter to"
        echo    "                       INFO: your boot loader config, then this tool will auto-load acpi-cpufreq."

    fi
    echo

    get_SCALING_GOVERNOR
    echo "$my_SCALING_GOVERNOR" | while read line
    do
        echo "Scaling Governor:      $line"
    done

    get_SCALING_MAX_FREQ_state
    echo "$my_SCALING_MAX_FREQ_state" | while read line
    do
        echo "MAX Freq Setting:      $line"
    done

    get_SCALING_MIN_FREQ_state
    echo "$my_SCALING_MIN_FREQ_state" | while read line
    do
        echo "MIN Freq Setting:      $line"
    done

    get_C_STATE_LIMIT
    echo "C State Limit:         $my_C_STATE_LIMIT"

    get_C1E_STATE
    echo "$my_C1E_STATE_SUMMARY" | while read line
    do
        echo "C1E State:             $line"
    done
}


case "$1" in
    start)
	    start
	;;
    stop)
	;;
    restart)
	    start
	;;
    status)
        # Not necessary to read config here, and allows for running on a
        # node that does not yet have a config. -BEF-
        status
	;;
    defaults|create-config|create)
        create_default_config_file
	;;
    *)
	echo "Usage: $PROGNAME {start|stop|restart|status|create-config}"
	RETVAL=2
	;;
esac

exit $RETVAL

