#!/usr/bin/expect -f

#
#  2013.02.04  Brian Finley <bfinley@us.ibm.com>
#  - created
#

#
# Example invokation:
#	i=rnsd3 ; ssh $i reboot ; /gpfs/ibm/install/BEF_Scripts/set_uefi_sync_active_state $i ; rpower $i boot
#

#
# 	The purpose of this script is to synchronize the "active" UEFI settings (the
# 	ones you see when you hit <F1> on a node during boot) with the settings
# 	displayed by asu64.
#
#	Here is an explanation of the reason this is necessary based on empirical
#	observation (please send me updated info if any of this is deemed
#	inaccurate):
#
# 
#  - Settings made to UEFI via the interactive menu <F1> are validated as
#    they are made.
# 
#  - Settings made to UEFI via asu64 are partially validated as they are
#    made, are cached but not active, and are not fully validated until
#    boot time, after which they are activated.
# 
#  - If an asu64 applied UEFI setting does not pass validation at boot
#    time, then it is silently ignored, and the cached settings remain "as
#    is", which means they are out of sync with the active settings --
#    even though the node has been rebooted.
# 
#  - This results in the problem of not being able to trust the settings
#    reported by asu64, even after a node has been re-booted -- _until_
#    the active settings are synced to the settings cache.
# 
#  - The active settings can be synced to the cached settings by hitting
#    <F1> and choosing "Save Settings".
# 
# 
#  This script is intended to automate the last bullet item above --
#  syncing the "active settings" in the UEFI to the "cached settings"
#  that are seen by asu64.  After running this script, asu64 should
#  report settings accurately until further changes are made.
# 
#  Lastly, this should be fixed in a future firmware revision redering
#  this script unnecessary.
# 
#  Have fun!  -Brian Finley



########################################################################
#
# This Expect script was originally generated by autoexpect on Mon Mar  4
# 11:53:43 2013, then modified by Brian Finley.  Expect and autoexpect were
# both written by Don Libes, NIST.
#
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000

# [lindex $argv 0] will be the first argument on the command line, which should be a nodename
#send -- "rpower [lindex $argv 0] boot\r"
send -- "rcons [lindex $argv 0]\r"

expect "<F1> Setup"
send -- "OP"

expect "Configuration and Boot Management"
# Arrow up 1/4
send -- "\[A"

expect "Exit Setup"
# Arrow up 2/4
send -- "\[A"

expect "Load Default Settings"
# Arrow up 3/4
send -- "\[A"

expect "Restore Settings"
# Arrow up 4/4
send -- "\[A"

expect "Save Settings"
# <Enter>
send -- "\r"

# Esc
expect "System Configuration and Boot Management"
send -- ""

expect "<Y> Exit Setup Utility"
send -- "Y"

